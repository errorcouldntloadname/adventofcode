from intcode import Intcode



#NAT sits at adress 255
class NAT():
	def __init__(self):
		self.package = ()
		self.sentY = set()
	#end of init

	
	#sends package and wether programm is down
	def send(self):
		print(self.package[1])
		if self.package[1] in self.sentY:
			return self.package , True
		else:
			self.sentY.add(self.package[1])
			return self.package , False
	#end of send
#end of NAT


#Terminal
class Terminal(Intcode):
	def __init__(self,string,adress):
		super().__init__(string)
		self.assignadress(adress)
		self.currentIn = []
		self.currentOut = []
		self.queue = []
		self.packageOut = ()
		self.passes = 0			#number of empty trying to recieve a package, 5+ passes == idle
	#end of init

	
	#inputs the assigned network adress
	def assignadress(self,adress):
		o = self.parametermode(1)
		self.Memory[o] = adress
		self.x += 2
		self.adress = adress
	#end of assignadress


	#handles Output of the Computer
	def handleOut(self,output):
		self.currentOut.append(output)
		if len(self.currentOut) == 3:
			self.packageOut = tuple(self.currentOut)
			self.currentOut = []
	#end of handleOut


	#retrieves Packages
	def handleIn(self):
		if len(self.currentIn) == 0:
			#package queue empty?
			if len(self.queue) == 0:
				self.passes += 1
				return -1
			else:
				self.passes = 0
				self.currentIn = list(self.queue.pop(0))
		return self.currentIn.pop(0)
	#end of handleIn


	#run only progresses 1 step
	def run(self):
		instruction = self.Memory[self.x]%100
		if instruction == 99:
			self.quit()
		elif instruction in self.opcode:
			self.opcode[instruction]()
		else:
			print("invalid!")
	#end of run
#end of Terminal






#-----------------------------------------
#programm
#-----------------------------------------
data = open("network.dat","r")
programm = data.readline().rstrip()

#create the NAT
nat = NAT()
#initiate evry terminal
terminal = []
for i in range(50):
	terminal.append(Terminal(programm,i))


#run evry terminal one step at a time
running = True
idle = [False]*50
while running:
	interfere = False 		#resets idle states after nat activates
	#evry terminal is idle
	if all(idle):
		package , finished = nat.send()
		if finished:
			print(package)
			break
		else:
			terminal[0].queue.append(package)
			interfere = True


	#run terminals
	for i in range(50):
		if interfere:		#reset passes if nat activated
			terminal[i].passes = 0
		terminal[i].run()	#process one step
		if terminal[i].passes >= 5:
			idle[i] = True
		else:
			idle[i] = False
		#did a package arrive?
		if len(terminal[i].packageOut) > 1:
			package = terminal[i].packageOut
			terminal[i].packageOut = ()
			print(i, package)
			if package[0] == 255:
				nat.package = (package[1],package[2])
				"""
				#part 1 win condition				
				running = False
				break
				"""
			else:
				terminal[package[0]].queue.append((package[1],package[2]))
