from intcode import Intcode
import time

class Droid(Intcode):
	def __init__(self,string,instruction):
		super().__init__(string)
		self.currentCommand = ""
		self.currentLine = ""	
		self.newlines = -1	#first output is 5 lines long , all others 4 lines, -1 saves large check
		self.instructions = instruction
	#end of init


	#inputs string char by char, asks for new string if no command in storage
	def handleIn(self):
		#manual version
		"""
		#print(self.currentCommand)
		if self.currentCommand == "":
			print("AND , OR , NOT |  A - D , T , J")
			print("O.O")
			self.currentCommand = input().upper() + chr(10)

		#provide first letter of current command
		temp = ord(self.currentCommand[:1])
		self.currentCommand = self.currentCommand[1:]
		return temp
		"""
		#automated version
		temp = self.instructions[:1]
		self.instructions = self.instructions[1:]
		return ord(temp)
		
	#handleIn


	#stores chars until newline
	def handleOut(self,output):
		if output > 256:
			print(output)
			return
		if output == 10:
			if self.newlines == 4:
				print(self.currentLine)
				time.sleep(0.5)
				self.currentLine = ""
				self.newlines = 0
			else:
				self.newlines += 1
				self.currentLine += chr(output)
		else:
			self.currentLine += chr(output)
		

data = open("droid.dat","r")
programm = data.readline().rstrip()			#Intcode programm provided by AoC
data.readline()		#skip line 2
instruction = ""
end = False

#read lines until "run" or "walk", uppercases evrything
while not(end):
	string = data.readline().upper()
	#walk and run finishes the reading (still reads em!!)
	end = ("RUN" == string.rstrip()) or ("WALK" == string.rstrip())
	instruction += string
print(instruction)
droid = Droid(programm,instruction)
droid.run()
