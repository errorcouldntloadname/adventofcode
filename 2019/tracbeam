from intcode import Intcode
import copy

class Drone(Intcode):
	def __init__(self,string):
		super().__init__(string)
		self.inputstack = []
		self.ispulled = 0
	#init

	
	#takes coordinate and outputs result
	def run(self,coordinate):
		self.inputstack = list(coordinate)
		while True:
			instruction = self.Memory[self.x]%100
			if instruction == 99:
				return self.ispulled		
			elif instruction in self.opcode:
				self.opcode[instruction]()
			else:
				print("invalid!")
				break
	#end of run
	

	#reflect output on is pulled (1 -> true)
	def handleOut(self,output):
		self.ispulled = output == 1
	#end of handleOut


	#forwards inputstack
	def handleIn(self):
		return self.inputstack.pop(0)
	#end of handleIn
#end of Drone

data = open("tracbeam.dat","r")
string = data.readline().rstrip()
drone = Drone(string)

def check(coordinate):
	drone = Drone(string)
	temp = drone.run(coordinate)
	#print(temp)
	return temp

"""
count = 0
#check 50x50 grid
for x in range(50):
	for y in range(50):
		if check((x,y)):
			count += 1
			print(x,y)
print(count)
"""


#check up-down first
x = 50
y = 50
running = True
while running:
	hightsearch = True
	while hightsearch:
		print(x,y)
		#if no pull move down until pull
		if check((x,y)):
			#hightsearch = False
			if check((x,y+99)):
				hightsearch = False
			else:
				x += 1
		else:
			y += 1

	#check left-right next
	widthsearch = True
	while widthsearch:
		print(x,y)
		#if no pull move down until pull
		if check((x,y)):
			#hightsearch = False
			if check((x+99,y)):
				widthsearch = False
			else:
				y += 1
		else:
			x += 1

	running = not(check((x,y+99)))
		

print(x*10000 + y)
