#Functions for each shuffle Varriation
#"deal into new stack" - essentially reverses the Stack
def TurnOver(Drawpile):
	Drawpile.reverse()
	return Drawpile
#end of TurnOver


#"cut n"
def cut(Drawpile,n):
	temp = Drawpile[:n]
	return Drawpile[n:] + temp
#end of cut


#deal with increments of n
def deal(Drawpile,n):
	Discardpile = [0]*len(Drawpile)
	position = 0
	while len(Drawpile) > 0:
		Discardpile[position] = Drawpile.pop(0)
		position = (position + n) % len(Discardpile)
	return Discardpile
#end of deal
#end of shuffle Variations


Drawpile = list(range(10007))


data = open("shuffle.dat","r")

for line in data:
	print(line)
	if "new" in line:
		Drawpile = TurnOver(Drawpile)
	elif "cut" in line:
		n = int(line.rstrip()[4:])
		Drawpile = cut(Drawpile,n)
	elif "increment" in line:
		n = int(line.rstrip()[20:])
		Drawpile = deal(Drawpile,n)


print(Drawpile[2020])
